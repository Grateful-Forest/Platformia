;;-*-Lisp-*-
(in-package goal)

(deftype synced-plat (plat-eco)
  ())

(defstate plat-idle (synced-plat)
  :virtual #t
  :event
    (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
      (case message
        (('wake) (go-virtual plat-path-active (the-as plat #f)))
        (('eco-blue) (go-virtual notice-blue (process->handle proc)))
        (('ridden 'edge-grabbed)
         (when (send-event *target* 'query 'powerup (pickup-type eco-blue))
           (send-to-all (-> self link) 'wake)
           (go-virtual plat-path-active (the-as plat #f))))))
  :enter
    (behavior ()
      (lods-assign! (-> self draw) (-> self unlit-look)))
  :trans
    (behavior ()
      (when (and (and *target* (>= (-> self notice-dist) (vector-vector-distance (-> self root trans) (-> *target* control trans))))
                 (send-event *target* 'query 'powerup (pickup-type eco-blue)))
        (send-to-all (-> self link) 'wake)
        (go-virtual plat-path-active (the-as plat #f)))
      (if (= (-> *game-info* current-continue) (get-continue-by-name *game-info* "plat-checkpoint"))
        (go-virtual plat-path-active (the-as plat #f))))
  :code
    (behavior ()
      (ja-post)
      (update-transforms! (-> self root))
      (anim-loop))
  :post ja-post)

(defstate notice-blue (synced-plat)
  :virtual override
  :event
    (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
      (case message
        (('wake)
         (sound-play "blue-eco-on" :position (the-as symbol (-> self root trans)))
         (go-virtual plat-path-active (the-as plat #f)))
        (('ridden 'edge-grabbed)
         (when (send-event *target* 'query 'powerup (pickup-type eco-blue))
           (send-to-all (-> self link) 'wake)
           (set! (-> *game-info* current-continue) (get-continue-by-name *game-info* "plat-checkpoint"))
           (sound-play "blue-eco-on" :position (the-as symbol (-> self root trans)))
           (go-virtual plat-path-active (the-as plat #f))))))
  :trans
    (behavior ()
      ((-> (method-of-object self plat-idle) trans))
      (let ((a1-0 (new 'stack-no-clear 'event-message-block)))
        (set! (-> a1-0 from) self)
        (set! (-> a1-0 num-params) 2)
        (set! (-> a1-0 message) 'query)
        (set! (-> a1-0 param 0) (the-as uint 'powerup))
        (set! (-> a1-0 param 1) (the-as uint 3))
        (if (and (not (send-event-function *target* a1-0))
                 (begin
                   (logior! (-> self mask) (process-mask sleep-code))
                   (not (-> self bouncing))))
          (go-virtual plat-idle))))
  :code
    (behavior ((arg0 handle))
      (set! (-> self target) arg0)
      (loop
        (let* ((gp-0 (handle->process (-> self target)))
               (v1-4 (if (and (nonzero? gp-0) (type-type? (-> gp-0 type) process-drawable)) gp-0)))
          (when v1-4
            (let* ((gp-1 (-> (the-as process-drawable v1-4) root))
                   (v1-6 (if (and (nonzero? gp-1) (type-type? (-> gp-1 type) collide-shape)) gp-1)))
              (when v1-6
                (let* ((s5-0 (-> self root root-prim prim-core))
                       (a1-3 (-> (the-as collide-shape v1-6) root-prim prim-core))
                       (f30-0 (vector-vector-distance (the-as vector s5-0) (the-as vector a1-3))))
                  (when (rand-vu-percent? 0.5)
                    (let ((gp-2 (new 'stack-no-clear 'vector)))
                      (set! (-> gp-2 quad) (-> s5-0 world-sphere quad))
                      (dotimes (s5-1 3)
                        (+! (-> gp-2 data s5-1) (rand-vu-float-range -5324.8 5324.8)))
                      (eco-blue-glow gp-2)))
                  (set! (-> self bouncing) #t)
                  (activate! (-> self smush)
                             (lerp-scale (rand-vu-float-range 1.1 1.3)
                                         (rand-vu-float-range 1.0 1.02)
                                         f30-0
                                         (-> *FACT-bank* suck-suck-dist)
                                         (-> *FACT-bank* suck-bounce-dist))
                             60
                             60
                             1.0
                             1.0))))))
        (suspend)))
  :post
    (behavior ()
      (plat-trans)
      (plat-post)))

(defmethod init-from-entity! ((this synced-plat) (arg0 entity-actor))
  (logior! (-> this mask) (process-mask platform))
  (set! (-> this notice-dist) (res-lump-float arg0 'notice-dist :default -1.0))
  (set! (-> this link) (new 'process 'actor-link-info this))
  (baseplat-method-24 this)
  (process-drawable-from-entity! this arg0)
  (let ((s4-0 (get-unlit-skel this))
        (s5-1 (get-lit-skel this)))
    (initialize-skeleton this s4-0 '())
    (setup-lods! (-> this unlit-look) s4-0 (-> this draw art-group) (-> this entity))
    (setup-lods! (-> this lit-look) s5-1 (-> this draw art-group) (-> this entity)))
  (logclear! (-> this mask) (process-mask actor-pause))
  (update-transforms! (-> this root))
  (set! (-> this part) (create-launch-control (-> *part-group-id-table* 107) this))
  (set! (-> this path) (new 'process 'curve-control this 'path -1000000000.0))
  (logior! (-> this path flags) (path-control-flag display draw-line draw-point draw-text))
  (set! (-> this fact) (new 'process 'fact-info this (pickup-type eco-pill-random) (-> *FACT-bank* default-pill-inc)))
  (load-params! (-> this sync) this (the-as uint 3000) 0.0 0.15 0.15)
  (set! (-> this sync-offset-dest) (-> this sync offset))
  (set! (-> this sync-linear-val) (get-phase-offset (-> this sync)))
  (sync-now! (-> this sync) (-> this sync-linear-val))
  (set! (-> this sync-offset-faux) (-> this sync offset))
  (cond
    ((logtest? (-> this path flags) (path-control-flag not-found))
     (set! (-> this path-pos) 0.0)
     (let ((a0-14 this)) (baseplat-method-26 a0-14) (go (method-of-object this plat-startup) a0-14)))
    ((> (-> this sync period) 0)
     (set! (-> this path-pos)
           (if (logtest? (-> this fact options) (fact-options wrap-phase))
             (get-current-phase (-> this sync))
             (get-current-phase-with-mirror (-> this sync))))))
  (eval-path-curve! (-> this path) (-> this root trans) (-> this path-pos) 'interp)
  (set! (-> this sound-id) (new-sound-id))
  (baseplat-method-26 this)
  (baseplat-method-21 this)
  (if (or (and (-> this entity) (logtest? (-> this entity extra perm status) (entity-perm-status complete)))
          (< (-> this notice-dist) 0.0))
    (go (method-of-object this plat-path-active) (the-as plat #t))
    (go (method-of-object this plat-idle)))
  (none))

(deftype timed-plat (plat)
  ((timings float 64)))

(defun get-current-phase-timed-plat ((this timed-plat))
  (let* ((cur-time (mod (the-as uint (current-time)) (-> this sync period)))
         (pos 0))
    (while (< pos (-> this path curve num-cverts))
      (let ((timing (fsec (-> this timings pos))))
        (when (< cur-time timing)
          (return (+ (the float pos) (/ (the float cur-time) (the float timing)))))
        (+! pos 1)
        (-! cur-time timing)))) 0.0)

(defun eval-linear-path! ((path path-control) (basetrans vector) (path-pos float))
  (let* ((pos0 (the int path-pos))
         (pos1 (if (>= (+ pos0 1) (-> path curve num-cverts)) 0 (+ pos0 1)))
         (partial (- path-pos pos0))
         (dir (new-stack-vector0)))
    (vector-! dir (-> path curve cverts pos1) (-> path curve cverts pos0))
    (vector-float*! dir dir partial)
    (vector+! basetrans (-> path curve cverts pos0) dir)))

(defstate plat-path-active (timed-plat)
  :virtual #t
  :event plat-event
  :exit
    (behavior ()
      (sound-stop (-> self sound-id)))
  :trans
    (behavior ()
      (set! (-> self path-pos)
            (get-current-phase-timed-plat self))
      (eval-linear-path! (-> self path) (-> self basetrans) (-> self path-pos))
      (if (< (vector-vector-distance (-> self root trans) (ear-trans)) 81920.0)
        (sound-play "eco-plat-hover" :id (-> self sound-id) :position (the-as symbol (-> self root trans))))
      (plat-trans))
  :code
    (the-as (function plat object)
            anim-loop)
  :post plat-post)

(defmethod init-from-entity! ((this timed-plat) (arg0 entity-actor))
  (logior! (-> this mask) (process-mask platform))
  (baseplat-method-24 this)
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this (get-unlit-skel this) '())
  (logior! (-> this skel status) (janim-status inited))
  (update-transforms! (-> this root))
  (baseplat-method-21 this)
  (baseplat-method-25 this)
  (load-params! (-> this sync) this (the-as uint 0) 0.0 0.15 0.15)
  (set! (-> this fact) (new 'process 'fact-info this (pickup-type eco-pill-random) (-> *FACT-bank* default-pill-inc)))
  (set! (-> this path) (new 'process 'curve-control this 'path -1000000000.0))
  (let* ((tag (new 'static 'res-tag))
         (data (res-lump-data arg0 'timings pointer :tag-ptr (& tag) :time -1000000000.0)))
    (when data
      ;; success, we got some data
      (dotimes (idx (-> this path curve num-cverts))
        (set! (-> this timings idx) (-> (the-as (pointer float) data) idx)))))
  (logior! (-> this path flags) (path-control-flag display draw-line draw-point draw-text))
  (set! (-> this sound-id) (new-sound-id))
  (cond
    ((logtest? (-> this path flags) (path-control-flag not-found))
     (set! (-> this path-pos) 0.0)
     (let ((a0-14 this)) (baseplat-method-26 a0-14) (go (method-of-object this plat-startup) a0-14)))
    ((> (-> this sync period) 0)
     (set! (-> this path-pos)
           (if (logtest? (-> this fact options) (fact-options wrap-phase))
             (get-current-phase (-> this sync))
             (get-current-phase-with-mirror (-> this sync))))
     (eval-path-curve! (-> this path) (-> this root trans) (-> this path-pos) 'interp)
     (let ((a0-18 this)) (baseplat-method-26 a0-18) (go (method-of-object this plat-startup) a0-18)))
    (else
     (set! (-> this path-pos) 0.0)
     (eval-path-curve! (-> this path) (-> this root trans) (-> this path-pos) 'interp)
     (let ((a0-20 this)) (baseplat-method-26 a0-20) (go (method-of-object this plat-startup) a0-20))))
  (none))

(deftype visual-plat (plat)
  ())

(defmethod baseplat-method-24 ((this visual-plat))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) default-collision-reaction)
    (set! (-> s5-0 no-reaction) (the-as (function collide-shape-moving collide-shape-intersect vector vector none) nothing))
    (alloc-riders s5-0 1)
    (let ((s4-0 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> s4-0 prim-core collide-as) (collide-kind))
      (set! (-> s4-0 collide-with) (collide-kind target))
      (set! (-> s4-0 prim-core action) (collide-action solid))
      (set! (-> s4-0 prim-core offense) (collide-offense indestructible))
      (set! (-> s4-0 transform-index) 0)
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 13107.2)
      (set-root-prim! s5-0 s4-0))
    (backup-collide-with-as s5-0)
    (set! (-> this root) s5-0))
  0
  (none))

(deftype once-plat (plat-eco)
  ((ended? symbol)))

(defstate plat-path-active (once-plat)
  :virtual #t
  :event plat-event
  :exit
    (behavior ()
      (sound-stop (-> self sound-id)))
  :trans
    (behavior ()
      (if (or (= (-> *level* level0 name) 'plat-4) (= (-> *level* level1 name) 'plat-4))
        (deactivate self))
      (when (not (-> self ended?))
        (set! (-> self path-pos)
              (if (logtest? (-> self fact options) (fact-options wrap-phase))
                (get-current-phase (-> self sync))
                (get-current-phase-with-mirror (-> self sync))))
        (if (>= (-> self path-pos) 0.9999)
          (set! (-> self ended?) #t)))
      (when (-> self ended?)
        (set! (-> self path-pos) 1.0))
      (eval-path-curve! (-> self path) (-> self basetrans) (-> self path-pos) 'interp)
      (if (< (vector-vector-distance (-> self root trans) (ear-trans)) 81920.0)
        (sound-play "eco-plat-hover" :id (-> self sound-id) :position (the-as symbol (-> self root trans))))
      (plat-trans))
  :code
    (the-as (function plat object)
            anim-loop)
  :post plat-post)

(defmethod init-from-entity! ((this once-plat) (arg0 entity-actor))
  (logior! (-> this mask) (process-mask platform))
  (set! (-> this notice-dist) (res-lump-float arg0 'notice-dist :default -1.0))
  (set! (-> this link) (new 'process 'actor-link-info this))
  (baseplat-method-24 this)
  (process-drawable-from-entity! this arg0)
  (let ((s4-0 (get-unlit-skel this))
        (s5-1 (get-lit-skel this)))
    (initialize-skeleton this s4-0 '())
    (setup-lods! (-> this unlit-look) s4-0 (-> this draw art-group) (-> this entity))
    (setup-lods! (-> this lit-look) s5-1 (-> this draw art-group) (-> this entity)))
  (logclear! (-> this mask) (process-mask actor-pause))
  (update-transforms! (-> this root))
  (set! (-> this part) (create-launch-control (-> *part-group-id-table* 107) this))
  (set! (-> this path) (new 'process 'curve-control this 'path -1000000000.0))
  (set! (-> this ended?) #f)
  (logior! (-> this path flags) (path-control-flag display draw-line draw-point draw-text))
  (set! (-> this fact) (new 'process 'fact-info this (pickup-type eco-pill-random) (-> *FACT-bank* default-pill-inc)))
  (load-params! (-> this sync) this (the-as uint 3000) 0.0 0.15 0.15)
  (set! (-> this sync-offset-dest) (-> this sync offset))
  (set! (-> this sync-linear-val) (get-phase-offset (-> this sync)))
  (sync-now! (-> this sync) (-> this sync-linear-val))
  (set! (-> this sync-offset-faux) (-> this sync offset))
  (set! (-> this path-pos) (get-current-phase-with-mirror (-> this sync)))
  (eval-path-curve! (-> this path) (-> this root trans) (-> this path-pos) 'interp)
  (set! (-> this sound-id) (new-sound-id))
  (baseplat-method-26 this)
  (baseplat-method-21 this)
  (if (or (and (-> this entity) (logtest? (-> this entity extra perm status) (entity-perm-status complete)))
          (< (-> this notice-dist) 0.0))
    (go (method-of-object this plat-path-active) (the-as plat #t))
    (go (method-of-object this plat-idle)))
  (none))

(deftype ride-plat (plat-eco)
  ((ended? symbol)))

(defstate plat-path-active (ride-plat)
  :virtual #t
  :event plat-event
  :exit
    (behavior ()
      (sound-stop (-> self sound-id)))
  :trans
    (behavior ()
      (if (or (= (-> *level* level0 name) 'plat-1) (= (-> *level* level1 name) 'plat-1))
        (deactivate self))
      (when (not (-> self ended?))
        (set! (-> self path-pos)
              (if (logtest? (-> self fact options) (fact-options wrap-phase))
                (get-current-phase (-> self sync))
                (get-current-phase-with-mirror (-> self sync))))
        (when (or (= (-> *level* level0 name) 'plat-4) (= (-> *level* level1 name) 'plat-4))
          (if (>= (-> self path-pos) 0.9999)
            (set! (-> self ended?) #t))))
      (when (-> self ended?)
        (set! (-> self path-pos) 1.0))
      (eval-path-curve! (-> self path) (-> self basetrans) (-> self path-pos) 'interp)
      (if (< (vector-vector-distance (-> self root trans) (ear-trans)) 81920.0)
        (sound-play "eco-plat-hover" :id (-> self sound-id) :position (the-as symbol (-> self root trans))))
      (plat-trans))
  :code
    (the-as (function plat object)
            anim-loop)
  :post plat-post)

(defmethod init-from-entity! ((this ride-plat) (arg0 entity-actor))
  (logior! (-> this mask) (process-mask platform))
  (set! (-> this notice-dist) (res-lump-float arg0 'notice-dist :default -1.0))
  (set! (-> this link) (new 'process 'actor-link-info this))
  (baseplat-method-24 this)
  (process-drawable-from-entity! this arg0)
  (let ((s4-0 (get-unlit-skel this))
        (s5-1 (get-lit-skel this)))
    (initialize-skeleton this s4-0 '())
    (setup-lods! (-> this unlit-look) s4-0 (-> this draw art-group) (-> this entity))
    (setup-lods! (-> this lit-look) s5-1 (-> this draw art-group) (-> this entity)))
  (logclear! (-> this mask) (process-mask actor-pause))
  (update-transforms! (-> this root))
  (set! (-> this part) (create-launch-control (-> *part-group-id-table* 107) this))
  (set! (-> this path) (new 'process 'curve-control this 'path -1000000000.0))
  (set! (-> this ended?) #f)
  (logior! (-> this path flags) (path-control-flag display draw-line draw-point draw-text))
  (set! (-> this fact) (new 'process 'fact-info this (pickup-type eco-pill-random) (-> *FACT-bank* default-pill-inc)))
  (load-params! (-> this sync) this (the-as uint 3000) 0.0 0.15 0.15)
  (set! (-> this sync-offset-dest) (-> this sync offset))
  (set! (-> this sync-linear-val) (get-phase-offset (-> this sync)))
  (sync-now! (-> this sync) (-> this sync-linear-val))
  (set! (-> this sync-offset-faux) (-> this sync offset))
  (set! (-> this path-pos) (get-current-phase-with-mirror (-> this sync)))
  (eval-path-curve! (-> this path) (-> this root trans) (-> this path-pos) 'interp)
  (set! (-> this sound-id) (new-sound-id))
  (baseplat-method-26 this)
  (baseplat-method-21 this)
  (if (or (and (-> this entity) (logtest? (-> this entity extra perm status) (entity-perm-status complete)))
          (< (-> this notice-dist) 0.0))
    (go (method-of-object this plat-path-active) (the-as plat #t))
    (go (method-of-object this plat-idle)))
  (none))

(deftype eco-custom (eco-blue)
  ())

(defstate wait (eco-custom)
  :virtual #t
  :event
    (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
      (local-vars (v0-3 object))
      (when (and (or (= message 'touch) (= message 'attack))
                 (and (logtest? (-> self flags) (collectable-flags can-collect))
                      (time-elapsed? (-> self birth-time) (-> self collect-timeout))
                      (!= (-> self next-state name) 'pickup)
                      (send-event proc 'get-pickup (-> self fact pickup-type) (-> self fact pickup-amount))))
        (logclear! (-> self mask) (process-mask actor-pause))
        (go-virtual pickup #f (process->handle proc)))
      (cond
        ((= message 'eco-blue)
         (when (and (not (logtest? (-> self flags) (collectable-flags fading ignore-blue)))
                    (!= (-> self next-state name) 'pickup)
                    (begin
                      (check-blue-suck (the-as process-drawable proc))
                      #t)
                    (logtest? (-> self flags) (collectable-flags can-collect))
                    (time-elapsed? (-> self birth-time) (-> self collect-timeout)))
           (logclear! (-> self mask) (process-mask actor-pause))
           (go-virtual notice-blue (process->handle proc))))
        ((= message 'trans)
         (set! (-> self root trans quad) (-> (the-as vector (-> block param 0)) quad))
         (update-transforms! (-> self root))
         (ja-post))
        ((= message 'jump)
         (logclear! (-> self mask) (process-mask actor-pause))
         (set! (-> self jump-pos quad) (-> (the-as vector (-> block param 0)) quad))
         (go-virtual jump))
        ((= message 'pickup)
         (when (!= (-> self next-state name) 'pickup)
           (if (and (> argc 0) (-> block param 0)) (move-to-point! (-> self root) (the-as vector (-> block param 0))))
           (logclear! (-> self mask) (process-mask actor-pause))
           (go-virtual pickup #f (the-as handle #f))))
        ((= message 'die) (logclear! (-> self mask) (process-mask actor-pause)) (go-virtual die))
        ((= message 'movie-pos) (set! v0-3 (-> block param 0)) (set! (-> self movie-pos-index) (the-as int v0-3)) v0-3)
        ((= message 'actor-pause)
         (cond
           ((-> block param 0)
            (logior! (-> self mask) (process-mask actor-pause))
            (set! v0-3 #t)
            (set! (-> self actor-pause) (the-as symbol v0-3))
            v0-3)
           (else (logclear! (-> self mask) (process-mask actor-pause)) (set! (-> self actor-pause) #f) #f)))
        ((= message 'fade)
         (logior! (-> self flags) (collectable-flags fade))
         (set! (-> self fadeout-timeout) (seconds 0.1))
         (set! v0-3 (current-time))
         (set! (-> self birth-time) (the-as time-frame v0-3))
         v0-3)))
  :enter
    (behavior ()
      (if (and (logtest? (-> self fact options) (fact-options instant-collect can-collect))
               (logtest? (-> self flags) (collectable-flags can-collect))
               (!= (-> self next-state name) 'pickup)
               (send-event *target* 'get-pickup (-> self fact pickup-type) (-> self fact pickup-amount)))
        (go-virtual pickup #f (process->handle *target*))))
  :trans
    (behavior ()
      (if (not (or (= (-> *level* level0 name) 'plat-1) (= (-> *level* level1 name) 'plat-1)))
        (deactivate self))
      (cond
        ((logtest? (-> self flags) (collectable-flags trans))
         (vector-v++! (-> self root transv) (compute-acc-due-to-gravity (-> self root) (new-stack-vector0) (the-as float 0.0)))
         (integrate-no-collide! (-> self root) (-> self root transv))
         (when (and (>= 0.0 (-> self root transv y)) (>= (-> self base y) (-> self root trans y)))
           (set! (-> self root trans y) (-> self base y))
           (cond
             ((< (-> self root transv y) -8192.0) (set! (-> self root transv y) (* -0.5 (-> self root transv y))))
             (else
              (vector-reset! (-> self root transv))
              (logclear! (-> self flags) (collectable-flags trans))
              (logior! (-> self flags) (collectable-flags can-collect))
              (if (-> self actor-pause) (logior! (-> self mask) (process-mask actor-pause)))
              (set! (-> self base quad) (-> self root trans quad))
              (if (and (logtest? (-> self fact options) (fact-options can-collect))
                       (not (logtest? (-> self flags) (collectable-flags ignore-blue))))
                (go-virtual notice-blue (process->handle *target*)))
              (if (and (logtest? (-> self fact options) (fact-options instant-collect can-collect))
                       (!= (-> self next-state name) 'pickup)
                       (send-event *target* 'get-pickup (-> self fact pickup-type) (-> self fact pickup-amount)))
                (go-virtual pickup #f (process->handle *target*)))))))
        (else (set! (-> self trans-hook) #f)))
      (update-transforms! (-> self root)))
  :code
    (behavior ()
      (loop
        (let ((gp-0 (-> self part))
              (s5-0 (-> self root root-prim prim-core)))
          (when (and (logtest? (-> self flags) (collectable-flags fade)) (time-elapsed? (-> self birth-time) (-> self fadeout-timeout)))
            (let ((v1-10 (- (seconds 1) (- (- (current-time) (-> self birth-time)) (-> self fadeout-timeout)))))
              (cond
                ((< v1-10 0) (process-entity-status! self (entity-perm-status dead) #t) (deactivate self))
                (else
                 (logclear! (-> self mask) (process-mask actor-pause))
                 (set! (-> self actor-pause) #f)
                 (logior! (-> self flags) (collectable-flags fading))
                 (logior! (-> self state-flags) (state-flags fade-out-particles))
                 (set! (-> gp-0 fade) (* 0.0033333334 (the float v1-10)))))))
          (spawn gp-0 (the-as vector s5-0)))
        (if (nonzero? (-> self sound)) (update! (-> self sound)))
        (suspend))))

(deftype drag-plat (plat)
  ((cell-time float)))

(defstate plat-path-active (drag-plat)
  :virtual #t
  :event plat-event
  :exit
    (behavior ()
      (sound-stop (-> self sound-id)))
  :trans
    (behavior ()
      (set! (-> self path-pos)
            (if (logtest? (-> self fact options) (fact-options wrap-phase))
              (get-current-phase (-> self sync))
              (get-current-phase-with-mirror (-> self sync))))
      (eval-path-curve! (-> self path) (-> self basetrans) (-> self path-pos) 'interp)
      (let ((target-riding? #f)
            (riders (-> (the-as collide-shape (-> self root)) riders)))
        (dotimes (idx (-> riders num-riders))
          (when (= (handle->process (-> riders rider idx rider-handle)) *target*)
            (true! target-riding?)))
        (if target-riding? 
          (set! (-> self cell-time) (+ (-> self cell-time) (* (seconds-per-frame) 1.0)))
          (set! (-> self cell-time) 0.0)))
      (when (and (>= (-> self cell-time) 3.0) (= (task-closed? (game-task platformia-cell) (task-status need-resolution)) #f))
        (close-specific-task! (game-task platformia-cell) (task-status need-resolution))
        (let ((gp-4 (ppointer->handle (birth-pickup-at-point (target-pos 0)
          (pickup-type fuel-cell)
          (the float (game-task platformia-cell))
          #f
          self
          (the-as fact-info #f)))))
        (send-event (handle->process (the-as handle gp-4)) 'pickup)
        (while (handle->process (the-as handle gp-4))
        (suspend))))
      (if (< (vector-vector-distance (-> self root trans) (ear-trans)) 81920.0)
        (sound-play "eco-plat-hover" :id (-> self sound-id) :position (the-as symbol (-> self root trans))))
      (plat-trans))
  :code
    (the-as (function plat object)
            anim-loop)
  :post plat-post)

  (defmethod init-from-entity! ((this drag-plat) (arg0 entity-actor))
  (logior! (-> this mask) (process-mask platform))
  (baseplat-method-24 this)
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton this (get-unlit-skel this) '())
  (logior! (-> this skel status) (janim-status inited))
  (update-transforms! (-> this root))
  (baseplat-method-21 this)
  (baseplat-method-25 this)
  (load-params! (-> this sync) this (the-as uint 0) 0.0 0.15 0.15)
  (set! (-> this fact) (new 'process 'fact-info this (pickup-type eco-pill-random) (-> *FACT-bank* default-pill-inc)))
  (set! (-> this path) (new 'process 'curve-control this 'path -1000000000.0))
  (set! (-> this cell-time) 0.0)
  (logior! (-> this path flags) (path-control-flag display draw-line draw-point draw-text))
  (set! (-> this sound-id) (new-sound-id))
  (cond
    ((logtest? (-> this path flags) (path-control-flag not-found))
     (set! (-> this path-pos) 0.0)
     (let ((a0-14 this)) (baseplat-method-26 a0-14) (go (method-of-object this plat-startup) a0-14)))
    ((> (-> this sync period) 0)
     (set! (-> this path-pos)
           (if (logtest? (-> this fact options) (fact-options wrap-phase))
             (get-current-phase (-> this sync))
             (get-current-phase-with-mirror (-> this sync))))
     (eval-path-curve! (-> this path) (-> this root trans) (-> this path-pos) 'interp)
     (let ((a0-18 this)) (baseplat-method-26 a0-18) (go (method-of-object this plat-startup) a0-18)))
    (else
     (set! (-> this path-pos) 0.0)
     (eval-path-curve! (-> this path) (-> this root trans) (-> this path-pos) 'interp)
     (let ((a0-20 this)) (baseplat-method-26 a0-20) (go (method-of-object this plat-startup) a0-20))))
  (none))
